html
  head
    script(type='text/javascript', src='javascripts/lib/jquery-1.8.2.min.js')

    link(rel='stylesheet', href='http://code.jquery.com/qunit/git/qunit.css', type='text/css', media='screen')
    script(type='text/javascript', src='http://code.jquery.com/qunit/git/qunit.js')

    script(type='text/javascript', src='/javascripts/lib/underscore.js')
    script(src='http://www.parsecdn.com/js/parse-1.1.1.min.js')

    script(src='/javascripts/PieceDrawer.js')
    script(src='/javascripts/board.js')
    script(src='/javascripts/collisionDetector.js')
    script(src='/javascripts/pill.js')
    script(src='/javascripts/virus.js')
    script(src='/javascripts/game.js')
    script(src='/javascripts/level.js')
    script(src='/javascripts/main.js')
    script(src='/javascripts/Utils.js')
    script(src='/javascripts/sound.js')
    script(src='/javascripts/reveal.js')

  body
    h1#qunit-header rr_mojo tests
    h2#qunit-banner
    #qunit-testrunner-toolbar
    h2#qunit-userAgent
    ol#qunit-tests
  script
    function createBoard(){
      width = 10;
      height = 16;
      return new Board(width,height);
    }

    function newPill(b,pos,colors){
      var c = new CollisionDetector(b);
      return  new Pill(b, c, pos, colors);
    }

    $(function(){
      module("Board");
        test("Board Creation",function(){
          var b = createBoard();
          notEqual(b.board,undefined, "board should be defined");
          equal(b.width,width,"width should match");
          equal(b.height,height,"height should match");
          var empty = true;
          b.eachSpot(function(spot,loc){
            if(!_.isUndefined(spot)){
              empty = false;
            }
          });
          equal(empty,true,"board should be empty");
        });

        test("Board Functions",function(){
            var b = createBoard();
            var in_bounds = true;
            for(var i = 0; i<width; ++i){
                for(var j = 0; j < height; ++j){
                    if(in_bounds){
                       in_bounds = b.inBounds(i,j);
                    }
                }
            }
            equal(in_bounds,true,"board should be inbounds");
            equal(b.inBounds(-1,0),false,"should not be inbounds");
            equal(b.inBounds(width,height),false,"should not be inbounds");
        });

        test("Clear Board",function(){
            var b = createBoard();
            var position = [ {x : 0 , y : 0 }, {x : 2, y : 1 } ];
            var colors = ["red", "red"];
            newPill(b,position,colors);
            b.clearAll();
            var empty = true;
            b.eachSpot(function(spot){
                if(!_.isUndefined(spot)){
                empty = false;
                }
            });
            equal(true,empty,"Board should be empty");
        })

    module("Pill");
      test("Create a Pill", function(){
        var b = createBoard();
        var c = new CollisionDetector(b);
        var position = [ {x : 0 , y : 0 }, {x : 1 , y : 0 } ];
        var colors = ["red", "blue"];
        var p = new Pill(b, c, position, colors);
        equal(Boolean(b.occupied(0,0)) && Boolean(b.occupied(1,0)), true, "piece should occupy spaces");
      });

      test("Checking to see if a pill is empty", function(){
        var b = createBoard();
        var c = new CollisionDetector(b);
        var position = [ {x : 0 , y : 0 }, {x : 1 , y : 0 } ];
        var colors = ["red", "blue"];
        var p = new Pill(b, c, position, colors);
        b.eraseSpot(0,0,1);
        equal(p.isEmpty(),0,"Pill Should Not be Empty");
        b.eraseSpot(1,0,1);
        equal(p.isEmpty(),1,"Pill Should be Empty");
      });

      test("Pill detects a collision against other piece", function(){
        var b = createBoard();
        var c = new CollisionDetector(b);
        var position2 = [ {x : 0 , y : 1 }, {x : 1 , y : 1 } ];
        var position = [ {x : 0 , y : 0 }, {x : 1 , y : 0 } ];
        var colors = ["red", "blue"];
        var p = new Pill(b, c, position, colors);
        var p2 = new Pill(b, c, position2, colors);
        equal(false, p.moveDown(), "Piece Should Not be able to move down");
      });

      test("Pill Collission", function(){
        var b = createBoard();
        var c = new CollisionDetector(b);
        var position = [ {x : 2 , y : 15 }, undefined ];
        var colors = ["green", undefined];
        new Pill(b, c, position, colors);
        var position2 = [ {x : 3 , y : 15 }, undefined ];
        var colors2 = ["teal", undefined];
        new Pill(b, c, position2, colors2);
        var position3 = [ undefined, {x : 4, y : 14} ];
        var colors3 = [undefined , "green"];
        new Pill(b, c, position3, colors3);
        var position4 = [ undefined, {x : 4, y : 15} ];
        var colors4 = [undefined , "red"];
        new Pill(b, c, position4, colors4);
        var position5 = [ {x : 7, y : 15}, undefined ];
        var colors5 = ["teal", undefined];
        new Pill(b, c, position5, colors5);
        var position6 = [ {x : 6, y : 14}, {x : 7, y : 14} ];
        var colors6 = ["green", "teal"];
        new Pill(b, c, position5, colors5);
        equal(b.dangling().length,0,'doo');
      });

      test("Pill detects a collision at bottom", function(){
        var b = createBoard();
        var c = new CollisionDetector(b);
        var position = [ {x : 0 , y : height - 1 }, {x : 1 , y : height - 1 } ];
        var colors = ["red", "blue"];
        var p = new Pill(b, c, position, colors);
        equal(false, p.moveDown(), "Piece Should Not be able to move down");
      });

    module("Detector");
      test("Can Move Down", function(){
        var b = createBoard();
        a = newPill(b,[ {x : 2 , y : 1 }, {x : 2, y : 2 } ],["red", "red"]);
        a.rotationState = 1;
        var toMove = []
        for(var i = 0; i < a.position.length; ++i){
            if(a.position[i]){
                toMove.push({
                    x : a.position[i].x,
                    y : a.position[i].y + 1
                });
            } else {
                toMove.push(undefined);
            }
        }
        equal(a.detector.canMove(toMove, a), true, "shoud be able to move down");
      });

    module("board");
      test("Match Detection X axis",function(){
        var b = createBoard();
        newPill(b,[ {x : 0 , y : 0 }, {x : 1, y : 0 } ],["red", "red"]);
        newPill(b,[ {x : 2 , y : 0 }, {x : 3, y : 0 } ],["red", "red"]);
        equal(b.matches().length,1,"Should Find 1 Match");
      });

      test("Match Detection Y axis",function(){
        var b = createBoard();
        newPill(b,[ {x : 0 , y : 0 }, {x : 0, y : 1 } ],["red", "red"]);
        newPill(b,[ {x : 0 , y : 2 }, {x : 0, y : 3 } ],["red", "red"]);
        equal(b.matches().length,1,"Should Find 1 Matches");
      });

      test("Match Detection X and Y axis",function(){
        var b = createBoard();
        newPill(b,[ {x : 0 , y : 0 }, {x : 1, y : 0 } ],["red", "red"]);
        newPill(b,[ {x : 2 , y : 0 }, {x : 3, y : 0 } ],["red", "red"]);
        newPill(b,[ {x : 5 , y : 0 }, {x : 5, y : 1 } ],["red", "red"]);
        newPill(b,[ {x : 5 , y : 2 }, {x : 5, y : 3 } ],["red", "red"]);
        equal(b.matches().length,2,"Should Find 2 Matches");
      });

      test("Match Detection Overlapping Matches",function(){
        var b = createBoard();
        newPill(b,[ {x : 0 , y : 0 }, {x : 1, y : 0 } ],["red", "red"]);
        newPill(b,[ {x : 2 , y : 0 }, {x : 3, y : 0 } ],["red", "red"]);
        newPill(b,[ {x : 1 , y : 1 }, {x : 1, y : 2 } ],["red", "red"]);
        newPill(b,[ {x : 1 , y : 3 }, {x : 1, y : 4 } ],["red", "red"]);
        equal(b.matches().length,2,"Should Find 2 Matches");
      });

      test("Dangling Pieces",function(){
        var b = createBoard();
        newPill(b,[ {x : 0 , y : 1 }, {x : 1, y : 1 } ],["red", "red"]);
        newPill(b,[ {x : 1 , y : 2 }, undefined ],["teal", undefined]);
        newPill(b,[ {x : 3 , y : 12 }, {x : 3 , y : 13 } ],["green", "red"]);
        newPill(b,[ {x : 5 , y : 12 }, {x : 6 , y : 12 } ],["red", "teal"]);
        newPill(b,[ {x : 0 , y : b.height -1 }, undefined ],["red", undefined]);
        equal(b.dangling().length, 5, "Should Find 5 Dangling Piece(s)")
      });

    module("game");
    
        test("Clears a row",function(){
          var level = 0;
          var speed = 'Low';
          var song  = 'fever';
          var g = new Game(level, speed, song);
          the_game = new Game(level, speed, song);
          new Pill(g.board, g.detector, [ {x : 0 , y : 0 }, {x : 1, y : 0 } ],["red", "red"]);
          new Pill(g.board, g.detector, [ {x : 2 , y : 0 }, {x : 3, y : 0 } ],["red", "red"]);
          equal(g.board.matches().length,1,"Should Find 1 Match");
          g.findMatches(function(){});
          equal(g.board.matches().length,0,"Should Find 0 Matches after clear");
        });

        test("Clears a column",function(){
          var level = 0;
          var speed = 'Low';
          var song  = 'fever';
          var g = new Game(level, speed, song);
          new Pill(g.board, g.detector, [ {x : 0 , y : 0 }, {x : 0, y : 1 } ],["red", "red"]);
          new Pill(g.board, g.detector, [ {x : 0 , y : 2 }, {x : 0, y : 3 } ],["red", "red"]);
          equal(g.board.matches().length,1,"Should Find 1 Match");
          g.findMatches(function(){});
          equal(g.board.matches().length,0,"Should Find 0 Matches after clear");
        });

        test("Clears overlapping matches",function(){
          var level = 0;
          var speed = 'Low';
          var song  = 'fever';
          var g = new Game(level, speed, song);
          new Pill(g.board, g.detector, [ {x : 0 , y : 0 }, {x : 1, y : 0 } ],["red", "red"]);
          new Pill(g.board, g.detector, [ {x : 2 , y : 0 }, {x : 3, y : 0 } ],["red", "red"]);
          new Pill(g.board, g.detector, [ {x : 1 , y : 1 }, {x : 1, y : 2 } ],["red", "red"]);
          new Pill(g.board, g.detector, [ {x : 1 , y : 3 }, {x : 1, y : 4 } ],["red", "red"]);
          equal(g.board.matches().length,2,"Should Find 1 Match");
          g.findMatches(function(){});
          equal(g.board.matches().length,0,"Should Find 0 Matches after clear");
        });

        test("Clearing 4 virues in lower speed", function(){
          var level = 0;
          var speed = 'Low';
          var song  = 'fever';
          var game = new Game(level, speed, song);

          for(var i=0; i<4; ++i){
            var virus    = new Virus(game, level, i);
            virus.color  = "red";
            virus.colors = ["red"];
            virus.position = {x : 0, y : i};
            game.board.board[0][i] = {pill : virus, pos : 0};
            virus.draw();
          }
          game.findMatches(function(){});

          equal(game.score, 1500, "Should sum 1500 points");
        });

        test("Clearing 3 virus in middle speed", function(){
          var level = 0;
          var speed = 'med';
          var song  = 'fever';
          var game = new Game(level, speed, song);

          for(var i=0; i<3; ++i){
            var virus    = new Virus(game, level, i);
            virus.color  = "red";
            virus.colors = ["red"];
            virus.position = {x : 0, y : i};
            game.board.board[0][i] = {pill : virus, pos : 0};
            virus.draw();
          }
          new Pill(game.board, game.detector, [ {x : 0 , y : 3 }, {x : 1, y : 3 } ],["red", "red"]);
          game.findMatches(function(){});

          equal(game.score, 1400, "Should sum 1400 points");
        });


        test("Clearing 2 virus in higher speed", function(){
          var level = 0;
          var speed = 'hi';
          var song  = 'fever';
          var game = new Game(level, speed, song);

          for(var i=0; i<2; ++i){
            var virus    = new Virus(game, level, i);
            virus.color  = "red";
            virus.colors = ["red"];
            virus.position = {x : 0, y : i};
            game.board.board[0][i] = {pill : virus, pos : 0};
            virus.draw();
          }
          new Pill(game.board, game.detector, [ {x : 0 , y : 2 }, {x : 0, y : 3 } ],["red", "red"]);
          game.findMatches(function(){});

          equal(game.score, 900, "Should sum 1400 points");
        });
    })
